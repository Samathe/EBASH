# Обзор парадигмы ООП
Говорят, чтобы проверить, поняли ли вы тему хорошо или нет, нужно
попытаться её объяснить другим. Для полного понимания парадигмы ООП, вас
попросили привести примеры к некоторым основным концепциям. Попробуйте
притвориться Александром Романовичем и придумать примеры, которые были бы
понятны школьникам средних классов.
## Задача 1
Попытайтесь сформулировать объяснения максимально просто: проводите
паралелли с объектами реального мира и действиями, которые они выполняют.
Вам нужно описать следующие базовые концепции:
- класс;

Можно сказать это, что мы создаем собственный тип данных, например тип есть
целые числа int() с соответсвующеми действиями + - * / и тд, который уже внутри питона есть, а нам нужен такой тип данных
который бы крутил допустим спинер, которую можно крутить по часовой один раз против часовой перевернуть и тд .

- параметры класса;

это как свойства, допустим мы создали спинер с 5-ю крыльями

- функции класса.

перевернуть, покрутить и тд.

## Задача 2
Придумайте прикольные паралелли между предметами, которые можно найти и
использовать в школе, чтобы объяснить понятие **инкапсуляции** для
учеников, которые хотят всерьёз заниматься программированием.

Сам копьютер, телефон, принтер, любая техника.

## Задача 3
Оказалось, что большая часть школьников, которым вам нужно объяснить, как
работает **наследование** в ООП, являются визуалами. Возьмите какуюнибудь группу объектов и изобразите иерархию объектов в виде графа, схемы
или дерева, которое бы визуализировало наследование. Для каждого
описанного объекта и подобъекта стоит указать следующее:
- название класса;
- параметры, которые являются общими у всех подклассов каждого класса;
- параметры, которые различаются в зависимости от класса одной подгруппы;
- проведите параллели между объектами в реальном мире и описанными
абстрактными классами.

🏠 Устройство(Device)
┌─────────────────────────────────┐
│ Свойства:                       │
│ • марка: string                 │
│ • модель: string                │
│ • год_выпуска: int              │
│ • включено: boolean             │
│                                 │
│ Методы:                         │
│ • включить()                    │
│ • выключить()                   │
│ • получить_инфо()               │
└─────────────┬───────────────────┘
│
┌─────────────┴─────────────┐
↓                           ↓

📱 МобильноеУстройство                💻 СтационарноеУстройство
(MobileDevice)(StationaryDevice)
┌─────────────────────────────┐         ┌─────────────────────────────┐
│ Наследует
от
Устройство +   │         │ Наследует
от
Устройство +   │
│                             │         │                             │
│ Свойства:                   │         │ Свойства:                   │
│ • батарея_процент: int      │         │ • потребление_ватт: int     │
│ • вес_граммы: int           │         │ • размер_корпуса: string    │
│ • диагональ_дюймы: float    │         │ • охлаждение: string        │
│                             │         │                             │
│ Методы:                     │         │ Методы:                     │
│ • зарядить()                │         │ • проверить_температуру()   │
│ • проверить_батарею()       │         │ • очистить_от_пыли()        │
│ • сделать_портативным()     │         │ • подключить_к_сети()       │
└─────────────┬───────────────┘         └─────────────┬───────────────┘
│                                       │
┌───────┴───────┐                       ┌───────┴───────┐
↓               ↓                       ↓               ↓

📞 Телефон          📱 Планшет           🖥️
Компьютер        📺 Телевизор
(Phone)(Tablet)(Computer)(TV)

┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐
│ Наследует
все   │  │ Наследует
все   │  │ Наследует
все   │  │ Наследует
все   │
│ от
Мобильного + │  │ от
Мобильного + │  │ от
Стационар. + │  │ от
Стационар. + │
│                 │  │                 │  │                 │  │                 │
│ Свойства:       │  │ Свойства:       │  │ Свойства:       │  │ Свойства:       │
│ • номер: string │  │ • стилус: bool  │  │ • процессор: str│  │ • разрешение: str│
│ • оператор: str │  │ • клавиатура:   │  │ • память_гб: int│  │ • smart_tv: bool │
│ • сим_карта: bool│  │   boolean       │  │ • ОС: string    │  │ • hdmi_порты: int│
│                 │  │ • размер_экрана:│  │ • видеокарта: str│  │ • пульт: boolean │
│ Методы:         │  │   string        │  │                 │  │                 │
│ • позвонить()   │  │                 │  │ Методы:         │  │ Методы:         │
│ • смс()         │  │ Методы:         │  │ • запустить_    │  │ • переключить_  │
│ • принять_      │  │ • рисовать_     │  │   программу()   │  │   канал()       │
│   звонок()      │  │   стилусом()    │  │ • установить_   │  │ • изменить_     │
│ • отклонить()   │  │ • подключить_   │  │   ПО()          │  │   громкость()   │
│ • заблокировать │  │   клавиатуру()  │  │ • обновить_     │  │ • подключить_   │
│                 │  │ • презентация() │  │   систему()     │  │   интернет()    │
│                 │  │ • читать_книгу()│  │ • перезагрузить │  │ • запустить_    │
│                 │  │                 │  │                 │  │   приложение()  │
└─────────────────┘  └─────────────────┘  └─────────────────┘  └─────────────────┘

## Задача 4
После прекрасно проведённого занятия некоторые ученики из группы, которая
работала над визуализацией иерархии животных в природе, остались после
занятия и завалили вас вопросами:
- что делать, если разных животных нужно кормить по-разному?

Полиморфизм, сделать одну функцию которая работает у каждого по разному
- вот бывает же такое, что хозяева питомцев по-разному воспитывают их, а
как это учесть?

Создать параметр behavior и указывать там

- помогите пожалуйста, а что делать, если у меня получается, что все
животные ходят на четырёх лапах, как это исправить?

Создать параметр n_lengs и и там каждому давать отдельно.

Вам стало очень приятно, что ученики задают такие умные вопросы, поэтому
вы решили, что темой следующего урока будет какая-то определённая
парадигма программирования, которая ответит на все эти вопросы.
Определите, что это за парадигма и объясните детям её базовые концепты.

Объектно орентированое программирование - когда мы создаем сами объекты как в реальной жизни и можем работать с их дейсвтиями